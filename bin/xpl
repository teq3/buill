#!/bin/bash
# @Function
# Open file in file explorer.
#
# @Usage
#   $ ./xpf [file [file ...] ]
#
# @online-doc https://github.com/oldratlee/useful-scripts/blob/dev-2.x/docs/shell.md#-xpl-and-xpf
# @author Jerry Lee (oldratlee at gmail dot com)
#
# NOTE about Bash Traps and Pitfalls:
#
# 1. DO NOT combine var declaration and assignment which value supplied by subshell in ONE line!
#    for example: readonly var1=$(echo value1)
#                 local var2=$(echo value1)
#
#    Because the combination make exit code of assignment to be always 0,
#      aka. the exit code of command in subshell is discarded.
#      tested on bash 3.2.57/4.2.46
#
#    solution is separation of var declaration and assignment:
#           var1=$(echo value1)
#           readonly var1
#           local var2
#           var2=$(echo value1)
set -eEuo pipefail

# NOTE: DO NOT declare var PROG as readonly in ONE line!
PROG="$(basename "$0")"
readonly PROG
readonly PROG_VERSION='2.5.0-dev'

readonly nl=$'\n' # new line

usage() {
    local -r exit_code="${1:-0}"
    (($# > 0)) && shift
    # shellcheck disable=SC2015
    [ "$exit_code" != 0 ] && local -r out=/dev/stderr || local -r out=/dev/stdout

    (($# > 0)) && echo "$*$nl" >$out

    cat <<EOF
Usage: ${PROG} [OPTION] [FILE]...
Open file in file explorer.
Example: ${PROG} file.txt

Options:
    -s, --selected  select the file or dir
    -h, --help      display this help and exit
    -V, --version   display version information and exit
EOF

    # shellcheck disable=SC2086
    exit "$exit_code"
}

progVersion() {
    echo "$PROG $PROG_VERSION"
    exit
}

# if program name is xpf, set option selected!
[ "xpf" == "${PROG}" ] && selected=true

################################################################################
# parse options
################################################################################

declare -a args=()
selected=false
while [ $# -gt 0 ]; do
    case "$1" in
    -s | --selected)
        selected=true
        shift
        ;;
    -h | --help)
        usage
        ;;
    -V | --version)
        progVersion
        ;;
    --)
        shift
        args=(${args[@]:+"${args[@]}"} "$@")
        break
        ;;
    -*)
        usage 2 "${PROG}: unrecognized option '$1'"
        ;;
    *)
        args=(${args[@]:+"${args[@]}"} "$1")
        shift
        ;;
    esac
done

readonly args selected

################################################################################
# biz options
################################################################################

# open one file
openOneFile() {
    local file="$1" slt="${selected}"

    case "$(uname)" in
    Darwin*)
        [ -f "${file}" ] && slt=true
        open ${slt:+-R} "$file"
        ;;
    CYGWIN*)
        [ -f "${file}" ] && slt=true
        explorer ${slt:+/select,} "$(cygpath -w "${file}")"
        ;;
    *)
        if [ -d "${file}" ]; then
            nautilus "$(dirname "${file}")"
        else
            if [ -z "${slt}" ]; then
                nautilus "$(dirname "${file}")"
            else
                nautilus "${file}"
            fi
        fi
        ;;
    esac
}

[ "${#args[@]}" == 0 ] && files=(.) || files=("${args[@]}")
for file in "${files[@]}"; do
    [ ! -e "$file" ] && {
        echo "$file not existed!"
        continue
    }

    openOneFile "$file"
    echo "$file opened${selected:+ with selection}!"
done
